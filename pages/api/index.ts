import type { NextApiRequest, NextApiResponse } from "next";

/* HOW TO ADD A NEW COLOR SPACE IN 2 STEPS:
 *
 * 1. Add a new object to the 'colorsConfig' array
 *  — Example: { type: "brgb", maxValues: [10000, 10000, 10000] }
 *
 * 2. Implement a new 'case' clause in the 'addCssColor' function.
 * This clause should return the color object (use the spread operator: `{...color}`)
 * plus a valid CSS color value as the 'cssColor' property
 *  — Example: case "brgb":
 *               return {
 *                 ...color,
 *                 cssColor: `${color.type}(${color.values.join(", ")})`,
 *               };
 */

// CUSTOM TYPES
type ColorConfig = {
  type: string;
  maxValues: number[];
}[];

type ColorData = {
  type: string;
  values: number[];
};

export type APIResponse = {
  type: string;
  values: number[];
  cssColor: string;
}[];

export type APIResponseError = {
  error: string;
};

// CONSTANTS
/*
 * The lowest possible value for each color parameter (zero for rgba, rgba and hsl)
 */
const MIN_VALUE: number = 0;

/*
 * The number of random colors we want to generate on each response
 */
const NUM_COLORS_TO_GENERATE: number = 5;

/*
 * Some color spaces (e.g., rgba) accepts an 'alpha' parameter as a number
 * between 0.0 (fully transparent) and 1.0 (fully opaque)
 * Use the constant below to set a default 'alpha' value
 */
const DEFAULT_ALPHA: number = 1;

/*
 * Each object defines a new color space to be generated by the API
 *  — 'type' refers to the color space name
 *  — 'maxValues' refers to the highest possible value for each parameter (in order)
 */
const colorsConfig: ColorConfig = [
  { type: "rgb", maxValues: [255 /* red */, 255 /* green */, 255 /* blue */] },
  { type: "rgba", maxValues: [255 /* red */, 255 /* green */, 255 /* blue */] },
  {
    type: "hsl",
    maxValues: [360 /* hue */, 100 /* saturation */, 100 /* lightness */],
  },
];

/*
 * 1. Generates random color objects based on 'colorsConfig' using Math operations
 * 2. Add ready-to-use 'cssColor' property to each object (by calling 'addCssColor')
 * 3. Return an array with complete color objects
 */
const generateRandomColors = () => {
  let randomColors: ColorData[] = [];

  for (let i = 0; i < NUM_COLORS_TO_GENERATE; i++) {
    const colorSpace = getRandomColorType();
    const colorValues = colorSpace.maxValues.map((maxValue) => {
      // Generates a random number between 'maxValue' (inclusive) and 'MIN_VALUE' (inclusive)
      return Math.floor(Math.random() * (maxValue - MIN_VALUE + 1)) + MIN_VALUE;
    });

    randomColors.push({ type: colorSpace.type, values: colorValues });
  }

  const colorsData = addCssColor(randomColors);

  return colorsData;
};

/*
 * Builds valid CSS color values (as strings) and attach it as a
 * 'cssColor' property to each object
 */
const addCssColor = (colorsArr: ColorData[]) => {
  const colors = colorsArr.map((color) => {
    const { type, values } = color;
    switch (type) {
      case "rgb":
        return {
          ...color,
          cssColor: `${type}(${values.join(", ")})`,
        };
      case "rgba":
        return {
          ...color,
          cssColor: `${type}(${values.join(", ")}, ${DEFAULT_ALPHA})`,
        };
      case "hsl":
        const [hue, saturation, lightness] = values;
        return {
          ...color,
          cssColor: `${type}(${hue}, ${saturation}%, ${lightness}%)`,
        };
    }
  });

  return colors;
};

// HELPER FUNCTION
// Gets a random index from the 'colorsConfig' object
const getRandomColorType = () => {
  const randomIndex = Math.floor(Math.random() * colorsConfig.length);
  const item = colorsConfig[randomIndex];

  return item;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<APIResponse | APIResponseError>
) {
  try {
    const colors = await generateRandomColors();
    res.status(200).json(colors as APIResponse);
  } catch {
    res.status(500).json({ error: "failed to load data" } as APIResponseError);
  }
}
